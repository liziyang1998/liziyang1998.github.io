{"pages":[{"title":"404","text":"","path":"404/index.html","date":"05-11","excerpt":""},{"title":"about","text":"李子旸中国科学技术大学 计算机科学与技术系 大三学生acm队员，2017、2018EC 银牌南京minieye 机器学习实习生 2019.7-2019.9华为上研所云核心网产品线 14级员工 2019.10 - ..github","path":"about/index.html","date":"05-11","excerpt":""},{"title":"search","text":"","path":"search/index.html","date":"05-11","excerpt":""}],"posts":[{"title":"近期需要整理","text":"大三期间：人工智能机器学习、优化问题 并行计算openmp 、mpi编程 cudacuda编程 实习期间：深度学习基础知识、CNN pytorch语法、用法 PWC-NET解析、复现成果，改进","path":"2019/07/10/近期需要整理/","date":"07-10","excerpt":"","tags":[{"name":"其他","slug":"其他","permalink":"http://www.lzycode.top/tags/其他/"}],"preview":null},{"title":"优化问题","text":"优化问题：min f(x)$f(x)$是目标函数，可以有限制条件$h(x) &lt; 0$,限制x的取值范围 优化问题形式化为搜索问题搜索问题是通用模型，优化问题可建模为搜索问题，","path":"2019/05/14/优化问题/","date":"05-14","excerpt":"","tags":[],"preview":null},{"title":"华为2019CodeCraft","text":"华为2019软件精英挑战赛总结 以下是比赛总结，穿插干货 队伍战队名：Nebula战队成员：李子旸，曾明亮，任正行上合赛区 中国科学技术大学初赛全国第一，复赛上合第一，决赛全国4强 三等奖 初赛我们三个人都是大三，对于这个codecraft比赛之前全然不了解(….) 是我偶然从一个acm竞赛群里看到有人说华为软件精英挑战赛，记得当时说的是拿个赛区64强就可以免技术笔试，32强就可以免技术面试，然后我就开始招募队友打算水一水 今年变为4强才免技术面试，看来往年水分还是比较多的，后来找到一个同学和另一个acm队友，开始初赛的征程 刚发布下来初赛题目的时候，我们三个在lug室研读了一下午的题目要求，才刚刚搞明白整个调度流程，查了很多关于车辆调度的论文和算法，大致想去采用模拟退火，遗传、蚁群算法等 实际效果并不好，并且确定了要本地写一个判题器方便条参并且验证思路。 然而前期我们也比较水，不重视这个比赛，花了大概一周的时候去看这些东西并且找往年的参赛感悟和经验总结，看到去年普便出现取平均的效果比LSTM等算法要好，并且遗传等算法我们初步感觉也不太好写时间开销也可能很大也不好避免死锁的问题，就把这个思路放到一边去了。 后来我们回到了最一开始的思路 一辆一辆发， 对每辆车走最短路，然后分速度或者不分速度确定发车时间区间。比如分速度意为对速度为4的车发车区间随即打乱在[0, 1000]内，就是在1000个时间片内把所有速度为4的车平均发。用这个办法来避免死锁的发生。存在的问题就是需要大量试验并且存在运气成分。 然后就是关键的最短路的部分，我们采取的是伪最短路，或者说是道路拥塞控制，跟道路长度没有任何关系，一直到决赛都是用这个模型，权重取的是道路宽度的负比例，最大速度的负比例，以及该路上会通过的车辆总数的正比例，通过多次迭代静态生成所有车辆的路径。正比例和负比例的系数为需要调的参数，初赛模型中还有每种速度的发车区间需要调。通过这个模型我们初赛练习赛的时间从两张图3000多提高到最好500多。我们也开始真正认真起来对待这个比赛。 由于我们的模型需要大量的试验确定参数，所以我们一直在写判题器，不过直到比赛前一天才和官方对上，还是因为另一队发现了官方的漏洞我们才改对(吐槽一下发车规则，同一条路的两个方向，如果有一个方向堵住不能发车，另一个方向也不能发车。。。)。 接下来就是初赛的正赛环节，几个从来熬夜到2 3点甚至4 5点第二天12点多起的人，对于正赛9点开始有点难受。。。发布地图之前我们猜测可能会增加到20w，10w不过最后还是6w，并且一直延续到决赛，主办方还是挺手下留情的。 发布下来之后我们先跑了一遍地图一然后交了一遍对了以下判题器发现完全对上之后，便开始一整天的调参环节，中午的时候我们用这个模型大概调到了2100左右 由于比赛成绩只保留了最后100次，当时的成绩已不可考证，吃过饭继续调参，稍微改了改发车区间大概调到2000多，然后我们开始划水，最后三小时的时候我们及时发现了一个正负比例系数的问题，改了之后到1800多，正式结束初赛。 后来群里有人发起投票让大家投自己的成绩，数了下大概有10队2000以内的，我们当时虚的一批，不过成绩真正发布之后。都是骗子。。发现我们是全国第一之后，还是很激动的，从这开始我们开始决定跷课搞比赛。 复赛复赛增添了新的规则，增加了预置车辆和优先车辆。更容易死锁，所以我们初赛的模型变得非常被动，于是开始尝试解死锁，即改变第一辆等待车的方向，从原死锁方向变更到另一个方向，由于是一个NP问题，地图上每一辆车都是一个变量，每一次改变都会造成蝴蝶效应，不可预期，我们刚开始也不能确定会不会成功，后来实践证明，在道路负载不是很极端的情况下一般是可以解开死锁。 复赛发车我们没有考虑速度因素，把所有的车全部按照计划时间发。使用一个极限流量maxRunningCarAmount来控制道路总流量，即当前流量如果超过了maxRunningCarAmount，即把现在要发的车的时间延后。对于优先车，我们的方法是优先发优先车，让优先车尽快结束。 但是成绩不是非常好，两张图大概在5000左右，距离咕咕咕4300的理论极限还有很大差距。 这时候我们想了几个方法： 方法一把电势的思想引入到此模型中，对每个路口规定一个电势，非预置车辆只能从电势高(低)的地方走到电势低(高)的地方，只要保证预置车辆不死锁，那么此模型肯定不会死锁，且道路流量可以增大。构建电势采用类似蛇形矩阵的思想，最外围为比内围高，电势逐渐降低。后期试验证明道路流量可以急剧增大，总共6w多辆车在同一时间片可以达到接近2w辆车，但是由于每辆车路线距离边长且拥堵，最终结果差得很多，不过我们没有继续改下去，有可能存在通过速度不同发车会有更好的结果？ 方法二跟实际结合，猜测地图会越来越像城际道路(正是决赛的8张地图)。真实城市中有高架桥，类比模型中的高速路。让高速车尽量多的走高速路，但是实际效果不好，因为复赛练习赛的地图毫无这个特点。(因为这个思想比较早，所以我们决赛的时候也忘记了，后来才想起来曾经有过这个模型，感觉有点遗憾) 方法三我们的路径完全是静态生成的，只有解锁是又生成了一遍路径，所以采取动态规划的思想。具体思路与静态生成路径的思路大体一样。并且加入了新的解锁方法，深度解锁，即倒退若干个时间片重新规划当前发车的车的路径。实际效果两张图大概5600。 几个方法都没有原先的静态生成好，我们这时候陷入江局，后来决定中西结合 中药(动态规划)好，西药(静态生成)快，即把动态规划和静态生成合在一起，一部分车静态生成，一部分车动态规划。把80%的车静态生成，剩下的动态生成，并且同时采用浅层解锁 和 深度解锁，即更改第一辆等待车辆的方向浅层解锁，如果没有可以更改就倒退若干个时间片，重新规划。 实践证明我们的中西结合是正确的，最终在复赛练习赛中达到了4500，距离咕咕咕的理论极限只差200 期间还有一些小优化，比如最后的一千辆车采用最短路，剪掉尾巴。当优先车总数下降的时候，增大道路最大限制流量。 上海正式赛由于需要调的参数比较多，各种正负比例因子、道路最大流量、迭代次数、增大的道路最大流量、结尾采用最短路的车辆等等，我们想了想决定使用超算。同时跑30多次，上述参数从一个我们给定的范围内随即取得。由于踩了一些坑，导致我们正是赛前一天晚上才部署好超算，初步的结果证明有一些提高。 正赛当天需求变更，我们觉得时间不是很充裕，并且为了保证程序不出bug，所以不变更。但是正式赛的时候暴露了我们的一个问题，就是加入了浅层解锁和深度解锁之后，跑一遍大概要5、6分钟。对于新的地图还得要先找出来最优参数，才能放到超算里面进一步找更优的，但是我们跑一遍程序的时间太慢，所以迟迟没能开始地图二的测试，开始测试地图二的时候已经到了最后一个小时，通过短暂的测试，我们确定了一组参数，成绩是3086，交上去之后还剩半小时，我们这时候又测试出了一组2900多的，然后博弈了一下，决定交，然后就出问题了，最后30s的时候返回了失败，这时候我们极限操作返回了上一个版本，交了上去，交完之后马上就关掉了提交通道。 不过由于时间太紧张，我们并没有完全回到上一个版本，本地测试了一下大概是没有问题，但是有可能还有bug，事后证明是本地判题器有一个判断没加上，没有判断发车时间是否大于计划时间，也是因为采用了新地图，我们参数有变更，之前的地图不会有这种问题。 于是我们和一直以来都照顾我们的专家一起自闭了很久。然后帮我们打电话问了康康老师，最后的结果是3097，虽然不是最好成绩，但最起码没有因为这个问题gg掉，不然就真的太遗憾了。最后奖品是V20，正好我的手机用了两年该换了23333 决赛决赛增加了车牌识别，我们三个毫无cv和ai基础，开始了一周的现学。最终决定采用开源的车牌识别代码，魔改成比赛要用的。并且后续地图不可见，黒箱测试。 由于我们对华为云使用太过生疏，还有模型也迟迟不能移植成功，一直没有成绩。并且复赛暴露的问题是解锁花费的时间太久，并且参数过多，黒箱测试根本不行。于是我们两条路走，一边继续搭建ai，一边优化代码加快速度。 决赛代码的大体思想是继续沿用之前的模型，把复赛需求变成修改10%路径的加入进去，这样浅层解锁如果第一辆是预置车便也可以重新规划路径。如果10%没有用完，便把剩下的预置车修改为最短路。大量实验并结合理论思路，把复赛的大量参数减少，到最后只剩一个道路最大流量。并且对比复赛地图和决赛地图，我们发现了一个适合我们模型的特点，就是道路最大流量与最终结果大致呈现为一个二次函数，越规整的地图这个特点越明显。然后发现道路最大流量一般在道路总流量的15%-20%之间。于是我们准备对黒箱测试写自适应代码。我们从道路总流量的10%-30%之间选取几个点作为道路最大流量，测试结果，再选其中结果最小的那个，继续在结果最小的点附近找更小的点，最终返回一个15分钟内可以找到的最优解。于是优化代码成了当务之急。 其实非常感谢一下上海华为对我们的支持，因为我们迟迟没有成绩，那边很担心，就派专家过来帮助我们，派了一个算法专家一个ai专家。并且让我们在比赛前两天让我们科大的三个队到酒店集中培训 五星级酒店啊，真豪华啊，奢侈啊，每天大鱼大肉啊，最终还是有效果的，我们ai终于搭建完成，识别率上到98%，代码优化也降到了跑一次只需要30-40s，可以在15分钟内跑10+次，成绩也到了2595，大概排名第4 (有两个队一直不交完整代码，总是一张图一张图的测试，但还是被我发现了，他们的成绩更好一些，不过大家都是调参，最重要看的还是黒箱的自适应)。 一些小优化：复赛用到的最后提升道路最大流量我们更改成了，在优先车下降的时候道路最大流量 * 1.2 深圳正式赛加了一个抽签分组的环节，之前我们还吐槽说直接总排名取前几不就完了，后面成绩证明，真香。这里点明表扬队友的好手气，没有和那几支强队分到一起。 我们吸取了复赛差点gg的教训，决定最后一小时的时候交一次最后代码，对于需求变更我们也不再做修改。于是赛场上并没有什么波折，3个小时很快就过去了。(期间麻烦hr小姐姐去打探了咕咕咕，FatCat等队的成绩，发现他们贼猛。。但索性没有分到一组，只要我们一直保持小组第一就不会提前碰上，后面还真是一直到决赛才碰到他们) 接下来是深圳游记下午去了东莞的松山湖研究所，真的美啊，虽然下雨了，但是也在最合适的时间停了。最好的办法就是上图了 一个小插曲：吃完晚饭，有人说看自己ai模型调用次数就可以推出自己跑了几轮，我们马上登陆modelarts，看到是4800次，我们后来推算了很久大概是调用了600次，如果每张地图还是测试100张的话，我们就进前四了。 颁奖典礼颁奖典礼上峰峰老师复盘比赛，放出了所有地图，后续的地图全都是类城市地图，我们后悔了很久。。。因为这种地图对于我们的模型并没有任何优势，我们三个对于能否进8强开始渐渐失去信心。 又一个小插曲：在最后8进4，冠亚争夺赛的时候，峰峰老师放出的两种发车策略对比时，有一张的发车策略跟我们非常像 最终终于公布成绩了，我们拿到了季军，这50多天的时间我们没有白费，最终虽然有一些遗憾，但我们离咕咕咕确实还有差距。明年再战。 两个插曲后续，我们确实调用了600次，进前四了，发车策略对比中，比较差的那个确实是我们的发车策略，每个时间片都控制道路最大流量，并且预置车结束的时候提升流量，即乘1.2，其实正赛最后一小时的时候我提出把提升流量的时间提前，不是预置车结束的时刻，而是优先车下降的时刻，后续测试8张地图，都能提升不少，能一直稳住小组第一并且冠亚争夺赛能拿到第三，不过有遗憾也没办法了。 最后放一张合影，膜一下c位咕咕咕 最后收官晚宴，华为是真的大气，在海边酒店举行的海鲜自助，还有非常丰富的活动，还给我过了第三次生日，自己一次，上海华为一次，深圳总部一次23333333，蓝牙耳机好评++。第一次见到了海边，海风吹着真舒服。 今年有些小遗憾，明年继续来肝","path":"2019/05/13/华为2019CodeCraft/","date":"05-13","excerpt":"","tags":[{"name":"CodeCraft","slug":"CodeCraft","permalink":"http://www.lzycode.top/tags/CodeCraft/"}],"preview":"imgs/CodeCraft.png"},{"title":"test","text":"","path":"2019/05/11/test/","date":"05-11","excerpt":"","tags":[],"preview":null},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","path":"2019/05/10/hello-world/","date":"05-10","excerpt":"","tags":[]}]}